# RLHF Audit Trail - Security Scanning Workflow
# This file should be copied to .github/workflows/security-scan.yml

name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Static Application Security Testing (SAST)
  sast:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      security-events: write
      contents: read
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-results.json
        bandit -r src/ -f sarif -o bandit-results.sarif
      continue-on-error: true

    - name: Upload Bandit SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: bandit-results.sarif

    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
        generateSarif: "1"
      continue-on-error: true

    - name: Upload Semgrep SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: python
        queries: security-and-quality
      continue-on-error: true

    - name: Secret scanning with TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: sast-results
        path: |
          bandit-results.json
          bandit-results.sarif
          semgrep.sarif

  # Dependency vulnerability scanning
  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety pip-audit

    - name: Run Safety vulnerability scan
      run: |
        safety check --json --output safety-results.json || true
        safety check --output safety-results.txt || true

    - name: Run pip-audit vulnerability scan
      run: |
        pip-audit --format=json --output=pip-audit-results.json || true
        pip-audit --format=cyclonedx-json --output=pip-audit-sbom.json || true

    - name: Run Snyk dependency scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json-file-output=snyk-results.json
      continue-on-error: true

    - name: License compliance check
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=csv --output-file=licenses.csv
        
        # Check for prohibited licenses
        python scripts/check-licenses.py --input licenses.json --output license-compliance.json

    - name: Upload dependency scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-results
        path: |
          safety-results.json
          safety-results.txt
          pip-audit-results.json
          pip-audit-sbom.json
          snyk-results.json
          licenses.json
          licenses.csv
          license-compliance.json

  # Container security scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      security-events: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ env.IMAGE_NAME }}:security-scan
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:security-scan
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy vulnerability scanner (JSON)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:security-scan
        format: 'json'
        output: 'trivy-results.json'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'json'
        output: 'trivy-fs-results.json'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: ${{ env.IMAGE_NAME }}:security-scan
        output-format: sarif
        output-file: grype-results.sarif
        severity-cutoff: medium

    - name: Upload Grype SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: grype-results.sarif

    - name: Docker Scout vulnerability scan
      uses: docker/scout-action@v1
      with:
        command: cves
        image: ${{ env.IMAGE_NAME }}:security-scan
        format: sarif
        output: scout-results.sarif
      continue-on-error: true

    - name: Upload Docker Scout results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: scout-results.sarif

    - name: Generate SBOM with Syft
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.IMAGE_NAME }}:security-scan
        format: spdx-json
        output-file: container-sbom.spdx.json

    - name: Upload container security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: container-security-results
        path: |
          trivy-results.sarif
          trivy-results.json
          trivy-fs-results.json
          grype-results.sarif
          scout-results.sarif
          container-sbom.spdx.json

  # Infrastructure as Code security scanning
  iac-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov IaC scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,kubernetes,terraform
        output_format: sarif
        output_file_path: checkov-results.sarif
        soft_fail: true

    - name: Upload Checkov SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

    - name: Run Terrascan IaC scan
      uses: tenable/terrascan-action@main
      with:
        iac_type: 'all'
        policy_type: 'all'
        only_warn: true
        sarif_upload: true

    - name: Run kube-score for Kubernetes manifests
      run: |
        if [ -d "deploy/kubernetes" ]; then
          curl -L https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64.tar.gz | tar -xz
          ./kube-score score deploy/kubernetes/*.yaml --output-format json > kube-score-results.json || true
        fi

    - name: Upload IaC security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: iac-security-results
        path: |
          checkov-results.sarif
          kube-score-results.json

  # Compliance and privacy security checks
  compliance-security:
    name: Compliance Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: rlhf_audit_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Run privacy security tests
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/rlhf_audit_test
        TESTING: true
      run: |
        pytest tests/ -m "privacy" -v --tb=short --junit-xml=privacy-security-results.xml

    - name: Run compliance security tests
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/rlhf_audit_test
        TESTING: true
      run: |
        pytest tests/ -m "compliance" -v --tb=short --junit-xml=compliance-security-results.xml

    - name: Check differential privacy implementation
      run: |
        python scripts/security-checks/dp-security-check.py --output dp-security-report.json

    - name: Verify audit trail integrity
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/rlhf_audit_test
        TESTING: true
      run: |
        python scripts/security-checks/audit-integrity-check.py --output audit-integrity-report.json

    - name: Check encryption implementation
      run: |
        python scripts/security-checks/encryption-check.py --output encryption-report.json

    - name: GDPR compliance security check
      run: |
        python scripts/compliance-checks/gdpr-security-check.py --output gdpr-security-report.json

    - name: Upload compliance security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: compliance-security-results
        path: |
          privacy-security-results.xml
          compliance-security-results.xml
          dp-security-report.json
          audit-integrity-report.json
          encryption-report.json
          gdpr-security-report.json

  # Security report generation and notifications
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [sast, dependency-check, container-security, iac-security, compliance-security]
    if: always()

    steps:
    - name: Download all security artifacts
      uses: actions/download-artifact@v3

    - name: Generate comprehensive security report
      run: |
        python3 << 'EOF'
        import json
        import os
        from datetime import datetime
        
        report = {
          "scan_date": datetime.now().isoformat(),
          "repository": "${{ github.repository }}",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "summary": {
            "sast": "${{ needs.sast.result }}",
            "dependency_check": "${{ needs.dependency-check.result }}",
            "container_security": "${{ needs.container-security.result }}",
            "iac_security": "${{ needs.iac-security.result }}",
            "compliance_security": "${{ needs.compliance-security.result }}"
          },
          "critical_findings": [],
          "high_findings": [],
          "medium_findings": [],
          "recommendations": []
        }
        
        # Process results and generate summary
        # (This would be expanded with actual result parsing)
        
        with open('security-report.json', 'w') as f:
          json.dump(report, f, indent=2)
        
        # Generate markdown report
        with open('security-report.md', 'w') as f:
          f.write(f"""# Security Scan Report
          
        **Scan Date:** {report['scan_date']}
        **Repository:** {report['repository']}
        **Commit:** {report['commit']}
        **Branch:** {report['branch']}
        
        ## Summary
        
        | Check | Status |
        |-------|--------|
        | SAST | {report['summary']['sast']} |
        | Dependency Check | {report['summary']['dependency_check']} |
        | Container Security | {report['summary']['container_security']} |
        | IaC Security | {report['summary']['iac_security']} |
        | Compliance Security | {report['summary']['compliance_security']} |
        
        ## Key Findings
        
        - Critical: {len(report['critical_findings'])}
        - High: {len(report['high_findings'])}  
        - Medium: {len(report['medium_findings'])}
        
        ## Recommendations
        
        Please review all security scan artifacts for detailed findings.
        """)
        EOF

    - name: Upload comprehensive security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: |
          security-report.json
          security-report.md

    - name: Post security summary to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let summary = `## 🔒 Security Scan Summary
          
          | Check | Status |
          |-------|--------|
          | SAST | ${{ needs.sast.result == 'success' && '✅' || '❌' }} |
          | Dependency Check | ${{ needs.dependency-check.result == 'success' && '✅' || '❌' }} |
          | Container Security | ${{ needs.container-security.result == 'success' && '✅' || '❌' }} |
          | IaC Security | ${{ needs.iac-security.result == 'success' && '✅' || '❌' }} |
          | Compliance Security | ${{ needs.compliance-security.result == 'success' && '✅' || '❌' }} |
          
          📋 [View detailed security report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

    - name: Notify security team on failures
      if: failure() && github.ref == 'refs/heads/main'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security'
        text: |
          🚨 Security scan failures detected in RLHF Audit Trail
          
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          
          Failed checks:
          - SAST: ${{ needs.sast.result }}
          - Dependency Check: ${{ needs.dependency-check.result }}
          - Container Security: ${{ needs.container-security.result }}
          - IaC Security: ${{ needs.iac-security.result }}
          - Compliance Security: ${{ needs.compliance-security.result }}
          
          Please review immediately: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}