# Production Deployment Configuration for Terragon SDLC System
# AUTO-GENERATED BY TERRAGON AUTONOMOUS SDLC v4.0

version: '3.8'

services:
  # RLHF Audit Trail Service
  rlhf-audit-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.rlhf
    image: terragon/rlhf-audit-trail:latest
    container_name: rlhf-audit-production
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - RLHF_MODE=production
      - PRIVACY_MODE=strong
      - COMPLIANCE_FRAMEWORK=eu_ai_act
      - LOG_LEVEL=INFO
      - STORAGE_BACKEND=postgres
      - CACHE_BACKEND=redis
      - ENCRYPTION_ENABLED=true
    ports:
      - "8080:8080"  # API port
      - "8090:8090"  # Health check port
    volumes:
      - rlhf_data:/app/data
      - rlhf_logs:/app/logs
      - ./config/rlhf:/app/config:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
    networks:
      - terragon-network
    depends_on:
      - postgres-primary
      - redis-cluster
      - vault-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Quantum Task Planner Service
  quantum-planner-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.quantum
    image: terragon/quantum-task-planner:latest
    container_name: quantum-planner-production
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - QUANTUM_MODE=production
      - PERFORMANCE_OPTIMIZATION=enabled
      - COHERENCE_PRESERVATION=true
      - ENTANGLEMENT_ENABLED=true
      - LOG_LEVEL=INFO
      - STORAGE_BACKEND=postgres
      - CACHE_BACKEND=redis
    ports:
      - "8081:8081"  # API port
      - "8091:8091"  # Health check port
    volumes:
      - quantum_data:/app/data
      - quantum_logs:/app/logs
      - ./config/quantum:/app/config:ro
    networks:
      - terragon-network
    depends_on:
      - postgres-primary
      - redis-cluster
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '6.0'
          memory: 12G
        reservations:
          cpus: '3.0'
          memory: 6G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # PostgreSQL Primary Database
  postgres-primary:
    image: postgres:15.4-alpine
    container_name: postgres-primary
    restart: unless-stopped
    environment:
      - POSTGRES_DB=terragon_prod
      - POSTGRES_USER=terragon_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./scripts/db/init:/docker-entrypoint-initdb.d:ro
      - ./config/postgres/postgresql.conf:/var/lib/postgresql/data/postgresql.conf:ro
      - ./config/postgres/pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf:ro
    networks:
      - terragon-network
    secrets:
      - postgres_password
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c work_mem=16MB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c log_statement=mod
      -c log_min_error_statement=error
      -c log_connections=on
      -c log_disconnections=on

  # Redis Cluster for Caching
  redis-cluster:
    image: redis:7.2-alpine
    container_name: redis-cluster
    restart: unless-stopped
    environment:
      - REDIS_REPLICATION_MODE=master
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - terragon-network
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec

  # HashiCorp Vault for Secrets Management
  vault-service:
    image: hashicorp/vault:1.15
    container_name: vault-production
    restart: unless-stopped
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=terragon-root-token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_ADDR=http://127.0.0.1:8200
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs
      - ./config/vault:/vault/config:ro
    networks:
      - terragon-network
    cap_add:
      - IPC_LOCK
    command: >
      vault server
      -config=/vault/config/vault.hcl

  # Nginx Load Balancer & Reverse Proxy
  nginx-proxy:
    image: nginx:1.25-alpine
    container_name: nginx-proxy-production
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/terragon.conf:/etc/nginx/conf.d/terragon.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - terragon-network
    depends_on:
      - rlhf-audit-service
      - quantum-planner-service

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus-monitoring
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
    networks:
      - terragon-network
    command: >
      --config.file=/etc/prometheus/prometheus.yml
      --storage.tsdb.path=/prometheus
      --web.console.libraries=/usr/share/prometheus/console_libraries
      --web.console.templates=/usr/share/prometheus/consoles
      --storage.tsdb.retention.time=15d
      --web.enable-lifecycle
      --web.enable-admin-api

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana-dashboard
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_INSTALL_PLUGINS=redis-datasource,postgres-datasource
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - terragon-network
    secrets:
      - grafana_password
    depends_on:
      - prometheus

  # ELK Stack - Elasticsearch
  elasticsearch:
    image: elasticsearch:8.8.2
    container_name: elasticsearch-logs
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=true
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - terragon-network

  # ELK Stack - Logstash
  logstash:
    image: logstash:8.8.2
    container_name: logstash-processor
    restart: unless-stopped
    volumes:
      - ./config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./config/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline:ro
    networks:
      - terragon-network
    depends_on:
      - elasticsearch

  # ELK Stack - Kibana
  kibana:
    image: kibana:8.8.2
    container_name: kibana-visualization
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - terragon-network
    depends_on:
      - elasticsearch

# Network Configuration
networks:
  terragon-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volume Configuration
volumes:
  # Application Data
  rlhf_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/terragon/data/rlhf
  quantum_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/terragon/data/quantum
  
  # Application Logs
  rlhf_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/terragon/logs/rlhf
  quantum_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/terragon/logs/quantum
  nginx_logs:
    driver: local
  
  # Database & Cache
  postgres_primary_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/terragon/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/terragon/data/redis
  
  # Secrets & Config
  vault_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/terragon/data/vault
  vault_logs:
    driver: local
  
  # Monitoring & Logging
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/terragon/data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/terragon/data/grafana
  elasticsearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/terragon/data/elasticsearch

# Secrets Configuration
secrets:
  postgres_password:
    external: true
  grafana_password:
    external: true

# Labels for Management
x-common-labels: &common-labels
  project: "terragon-sdlc"
  environment: "production"
  version: "4.0"
  maintainer: "terragon-labs"
  
x-logging: &default-logging
  logging:
    driver: json-file
    options:
      max-size: "10m"
      max-file: "3"

# Health Check Configuration
x-healthcheck: &default-healthcheck
  healthcheck:
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 60s