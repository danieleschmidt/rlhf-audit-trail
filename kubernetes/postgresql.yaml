apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-pvc
  namespace: rlhf-audit-trail
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: gp2  # Adjust based on your storage class
---
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-secret
  namespace: rlhf-audit-trail
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
type: Opaque
stringData:
  postgres-password: "REPLACE_WITH_SECURE_PASSWORD"
  postgres-user: "rlhf_audit"
  postgres-db: "rlhf_audit_trail"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: rlhf-audit-trail
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
data:
  # PostgreSQL configuration optimized for audit trail workload
  postgresql.conf: |
    # Connection settings
    max_connections = 200
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 2
    
    # Logging settings for audit compliance
    log_destination = 'stderr'
    log_line_prefix = '%t [%p-%l] %u@%d '
    log_statement = 'all'
    log_min_duration_statement = 1000
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 0
    
    # Write-ahead logging for reliability
    wal_level = replica
    max_wal_senders = 3
    wal_keep_segments = 32
    
    # Performance tuning
    synchronous_commit = on
    commit_delay = 0
    
    # Security settings
    ssl = on
    ssl_cert_file = '/etc/ssl/certs/ssl-cert-snakeoil.pem'
    ssl_key_file = '/etc/ssl/private/ssl-cert-snakeoil.key'
  
  # Database initialization script
  init-db.sql: |
    -- Create audit trail database and user if they don't exist
    CREATE DATABASE rlhf_audit_trail;
    CREATE USER rlhf_audit WITH ENCRYPTED PASSWORD 'REPLACE_WITH_SECURE_PASSWORD';
    GRANT ALL PRIVILEGES ON DATABASE rlhf_audit_trail TO rlhf_audit;
    
    -- Connect to the audit trail database
    \c rlhf_audit_trail;
    
    -- Create extensions needed for audit trail
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
    -- Grant permissions
    GRANT ALL ON SCHEMA public TO rlhf_audit;
    GRANT ALL ON ALL TABLES IN SCHEMA public TO rlhf_audit;
    GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO rlhf_audit;
    
    -- Create audit logging table for database operations
    CREATE TABLE IF NOT EXISTS db_audit_log (
        id SERIAL PRIMARY KEY,
        timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        operation TEXT NOT NULL,
        table_name TEXT,
        user_name TEXT,
        query TEXT,
        success BOOLEAN DEFAULT TRUE,
        error_message TEXT
    );
    
    -- Create audit trigger function
    CREATE OR REPLACE FUNCTION audit_trigger_function()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO db_audit_log (operation, table_name, user_name, query)
        VALUES (TG_OP, TG_TABLE_NAME, current_user, current_query());
        RETURN NULL;
    END;
    $$ LANGUAGE plpgsql;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  namespace: rlhf-audit-trail
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: rlhf-audit-trail
spec:
  replicas: 1
  strategy:
    type: Recreate  # Important for database with persistent storage
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: rlhf-audit-trail
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgresql
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgresql
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: postgres-db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgresql-init
          mountPath: /docker-entrypoint-initdb.d/
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      
      # PostgreSQL Exporter for monitoring
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.12.0
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@localhost:5432/$(POSTGRES_DB)?sslmode=disable"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: postgres-password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: postgres-db
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9187
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9187
          initialDelaySeconds: 5
          periodSeconds: 5
      
      volumes:
      - name: postgresql-data
        persistentVolumeClaim:
          claimName: postgresql-pvc
      - name: postgresql-config
        configMap:
          name: postgresql-config
      - name: postgresql-init
        configMap:
          name: postgresql-config
          items:
          - key: init-db.sql
            path: init-db.sql
      
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-service
  namespace: rlhf-audit-trail
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: rlhf-audit-trail
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: 5432
    protocol: TCP
  - name: metrics
    port: 9187
    targetPort: 9187
    protocol: TCP
  selector:
    app.kubernetes.io/name: postgresql