version: '3.8'

# Production-ready RLHF Audit Trail deployment
# Auto-scaling, load balancing, and high availability

services:
  # Load Balancer / Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - audit-service-1
      - audit-service-2
      - audit-service-3
    networks:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # RLHF Audit Trail Services (Horizontally Scaled)
  audit-service-1:
    build:
      context: ..
      dockerfile: docker/Dockerfile.production
    environment:
      - NODE_ID=audit-service-1
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://audit_user:${DB_PASSWORD}@postgres:5432/rlhf_audit
      - STORAGE_BACKEND=s3
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - COMPLIANCE_MODE=eu_ai_act
      - LOG_LEVEL=INFO
      - METRICS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
    volumes:
      - audit_logs:/app/logs
      - audit_data:/app/data
    networks:
      - backend
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  audit-service-2:
    build:
      context: ..
      dockerfile: docker/Dockerfile.production
    environment:
      - NODE_ID=audit-service-2
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://audit_user:${DB_PASSWORD}@postgres:5432/rlhf_audit
      - STORAGE_BACKEND=s3
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - COMPLIANCE_MODE=eu_ai_act
      - LOG_LEVEL=INFO
    volumes:
      - audit_logs:/app/logs
      - audit_data:/app/data
    networks:
      - backend
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  audit-service-3:
    build:
      context: ..
      dockerfile: docker/Dockerfile.production
    environment:
      - NODE_ID=audit-service-3
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://audit_user:${DB_PASSWORD}@postgres:5432/rlhf_audit
      - STORAGE_BACKEND=s3
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - COMPLIANCE_MODE=eu_ai_act
      - LOG_LEVEL=INFO
    volumes:
      - audit_logs:/app/logs
      - audit_data:/app/data
    networks:
      - backend
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Database - PostgreSQL with High Availability
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=rlhf_audit
      - POSTGRES_USER=audit_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--data-checksums
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ../docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U audit_user -d rlhf_audit"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=2GB
      -c effective_cache_size=6GB
      -c work_mem=16MB
      -c maintenance_work_mem=512MB
      -c random_page_cost=1.1
      -c temp_file_limit=2GB
      -c log_min_duration_statement=1000
      -c log_statement=ddl
      -c log_checkpoints=on
      -c log_lock_waits=on
      -c checkpoint_timeout=15min
      -c max_wal_size=4GB

  # Redis - High Performance Caching
  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - backend
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      - prometheus

  # Log Management - Loki
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ../monitoring/loki/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - backend
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml

  # Log Collection - Promtail
  promtail:
    image: grafana/promtail:latest
    volumes:
      - ../monitoring/promtail/promtail-config.yaml:/etc/promtail/config.yml:ro
      - audit_logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      - loki

  # Backup Service
  backup:
    image: postgres:16-alpine
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_backups:/backups
      - ../scripts/backup.sh:/backup.sh:ro
    networks:
      - backend
    restart: "no"
    depends_on:
      - postgres
    entrypoint: ["sh", "-c"]
    command: ["while true; do sleep 3600; /backup.sh; done"]

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true

volumes:
  # Application Data
  audit_logs:
    driver: local
  audit_data:
    driver: local
  
  # Database
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  
  # Cache
  redis_data:
    driver: local
  
  # Monitoring
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  
  # Logs
  nginx_logs:
    driver: local