name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published]

permissions:
  contents: write
  id-token: write

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate tag format
      id: version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        echo "Tag: $TAG"
        
        if [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Valid release tag"
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        elif [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-(alpha|beta|rc)\.[0-9]+)$ ]]; then
          echo "Valid pre-release tag"
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "Invalid tag format: $TAG"
          exit 1
        fi

  tests:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: validate-tag
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,testing]"

    - name: Run comprehensive tests
      run: |
        pytest tests/ --cov=src --cov-report=xml

    - name: Run security checks
      run: |
        bandit -r src/
        safety check

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [validate-tag, tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Update version in pyproject.toml
      run: |
        sed -i 's/version = ".*"/version = "${{ needs.validate-tag.outputs.version }}"/' pyproject.toml

    - name: Build package
      run: python -m build

    - name: Check distribution
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-${{ needs.validate-tag.outputs.version }}
        path: dist/
        retention-days: 90

  security-scan:
    name: Final Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-${{ needs.validate-tag.outputs.version }}
        path: dist/

    - name: Run Trivy scan on built package
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'dist/'
        format: 'sarif'
        output: 'trivy-release-scan.sarif'

  generate-sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install SBOM tools
      run: |
        pip install cyclone-dx-python pip-audit

    - name: Install package dependencies
      run: |
        pip install -e .

    - name: Generate SBOM
      run: |
        cyclonedx-py -o sbom.json
        cyclonedx-py -o sbom.xml --format xml

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ needs.validate-tag.outputs.version }}
        path: |
          sbom.json
          sbom.xml
        retention-days: 365

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-tag, tests, build, security-scan]
    environment: release
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-${{ needs.validate-tag.outputs.version }}
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://upload.pypi.org/legacy/
        print-hash: true

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-tag, tests, build, security-scan, generate-sbom, publish-pypi]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate changelog
      id: changelog
      run: |
        # Extract changelog section for this version
        VERSION="${{ needs.validate-tag.outputs.version }}"
        
        # Create release notes
        cat > release-notes.md << EOF
        ## RLHF Audit Trail v${VERSION}
        
        ### What's Changed
        
        This release includes improvements to compliance, security, and performance for RLHF audit trail functionality.
        
        ### Installation
        
        \`\`\`bash
        pip install rlhf-audit-trail==${VERSION}
        \`\`\`
        
        ### Compliance
        
        - âœ… EU AI Act compliant
        - âœ… NIST AI Framework compatible
        - âœ… Security scanned and verified
        
        ### Files
        
        - ðŸ“¦ Python package available on PyPI
        - ðŸ“‹ SBOM (Software Bill of Materials) included
        - ðŸ”’ Cryptographically signed releases
        
        ### Verification
        
        All releases are automatically built and tested with comprehensive security scanning.
        EOF

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.validate-tag.outputs.version }}
        release_name: RLHF Audit Trail v${{ needs.validate-tag.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ needs.validate-tag.outputs.is-prerelease == 'true' }}

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./sbom-${{ needs.validate-tag.outputs.version }}/sbom.json
        asset_name: sbom.json
        asset_content_type: application/json

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-tag, create-github-release]
    if: always() && needs.create-github-release.result == 'success'
    steps:
    - name: Send notification
      run: |
        echo "âœ… RLHF Audit Trail v${{ needs.validate-tag.outputs.version }} released successfully!"
        echo "ðŸ“¦ Available on PyPI: https://pypi.org/project/rlhf-audit-trail/${{ needs.validate-tag.outputs.version }}/"
        echo "ðŸ”— GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-tag.outputs.version }}"

  security-advisory:
    name: Security Advisory Check
    runs-on: ubuntu-latest
    needs: publish-pypi
    if: always()
    steps:
    - name: Check for security advisories
      run: |
        echo "ðŸ”’ Monitoring for security advisories on this release..."
        echo "If vulnerabilities are discovered post-release, they will be tracked in GitHub Security Advisories."