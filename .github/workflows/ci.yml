name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,testing]"

    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing --junitxml=pytest.xml
      env:
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest.xml
          htmlcov/
        retention-days: 30

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run pre-commit
      uses: pre-commit/action@v3.0.1

    - name: Run linting
      run: |
        ruff check src tests --output-format=github
        black --check src tests
        isort --check-only src tests

    - name: Run type checking
      run: |
        mypy src --junit-xml mypy.xml
      continue-on-error: true

    - name: Upload lint results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-results
        path: mypy.xml
        retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety detect-secrets

    - name: Create reports directory
      run: mkdir -p reports

    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o reports/bandit-report.json || true
        bandit -r src/ -f txt -o reports/bandit-report.txt || true

    - name: Run Safety dependency scan
      run: |
        safety check --json --output reports/safety-report.json || true

    - name: Run secrets detection
      run: |
        detect-secrets scan --baseline .secrets.baseline --force-use-all-plugins

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: reports/
        retention-days: 90

  compliance:
    name: Compliance Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,testing]"

    - name: Run compliance tests
      run: |
        pytest tests/ -m compliance -v --junitxml=compliance.xml
      env:
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Upload compliance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: compliance-results
        path: compliance.xml
        retention-days: 90

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/
        retention-days: 30

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,testing]"

    - name: Run integration tests
      run: |
        pytest tests/ -m integration -v --junitxml=integration.xml
      env:
        REDIS_URL: redis://localhost:6379
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-results
        path: integration.xml
        retention-days: 30