version: '3.8'

services:
  quantum-planner:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: quantum-task-planner
    ports:
      - "8000:8000"
    environment:
      - QUANTUM_PLANNER_ENV=production
      - QUANTUM_PLANNER_LOG_LEVEL=INFO
      - QUANTUM_PLANNER_API_HOST=0.0.0.0
      - QUANTUM_PLANNER_API_PORT=8000
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://quantum:quantum@postgres:5432/quantum_planner
    volumes:
      - quantum_logs:/app/logs
      - quantum_data:/app/data
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - quantum_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: quantum-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - quantum_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: quantum-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=quantum_planner
      - POSTGRES_USER=quantum
      - POSTGRES_PASSWORD=quantum
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    networks:
      - quantum_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quantum -d quantum_planner"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  quantum_logs:
    driver: local
  quantum_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  quantum_network:
    driver: bridge