# Kubernetes Production Deployment for Terragon SDLC System
# AUTO-GENERATED BY TERRAGON AUTONOMOUS SDLC v4.0

apiVersion: v1
kind: Namespace
metadata:
  name: terragon-production
  labels:
    name: terragon-production
    environment: production
    project: terragon-sdlc

---

# ConfigMaps
apiVersion: v1
kind: ConfigMap
metadata:
  name: rlhf-config
  namespace: terragon-production
data:
  privacy_mode: "strong"
  compliance_framework: "eu_ai_act"
  storage_backend: "postgres"
  cache_backend: "redis"
  log_level: "INFO"

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: quantum-config
  namespace: terragon-production
data:
  performance_optimization: "enabled"
  coherence_preservation: "true"
  entanglement_enabled: "true"
  storage_backend: "postgres"
  cache_backend: "redis"
  log_level: "INFO"

---

# Secrets
apiVersion: v1
kind: Secret
metadata:
  name: terragon-secrets
  namespace: terragon-production
type: Opaque
data:
  postgres-password: dGVycmFnb24tcHJvZC1wYXNzd29yZA== # terragon-prod-password (base64)
  redis-password: cmVkaXMtcHJvZC1wYXNzd29yZA== # redis-prod-password (base64)
  jwt-secret: and0LXNlY3JldC1rZXktZm9yLWF1dGg= # jwt-secret-key-for-auth (base64)

---

# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-primary
  namespace: terragon-production
  labels:
    app: postgres-primary
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-primary
  template:
    metadata:
      labels:
        app: postgres-primary
        tier: database
    spec:
      containers:
      - name: postgres
        image: postgres:15.4-alpine
        env:
        - name: POSTGRES_DB
          value: terragon_prod
        - name: POSTGRES_USER
          value: terragon_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: terragon-secrets
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U terragon_user -d terragon_prod
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U terragon_user -d terragon_prod
          initialDelaySeconds: 60
          periodSeconds: 20
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: terragon-production
  labels:
    app: postgres-primary
spec:
  selector:
    app: postgres-primary
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---

# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-cluster
  namespace: terragon-production
  labels:
    app: redis-cluster
    tier: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
        tier: cache
    spec:
      containers:
      - name: redis
        image: redis:7.2-alpine
        command: ["redis-server"]
        args:
        - --maxmemory 2gb
        - --maxmemory-policy allkeys-lru
        - --save 900 1
        - --save 300 10
        - --save 60 10000
        - --appendonly yes
        - --appendfsync everysec
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          limits:
            cpu: "1"
            memory: 2Gi
          requests:
            cpu: "0.5"
            memory: 1Gi
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 15
          periodSeconds: 5
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: terragon-production
  labels:
    app: redis-cluster
spec:
  selector:
    app: redis-cluster
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---

# RLHF Audit Trail Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rlhf-audit-service
  namespace: terragon-production
  labels:
    app: rlhf-audit-service
    tier: application
spec:
  replicas: 3
  selector:
    matchLabels:
      app: rlhf-audit-service
  template:
    metadata:
      labels:
        app: rlhf-audit-service
        tier: application
    spec:
      containers:
      - name: rlhf-audit
        image: terragon/rlhf-audit-trail:latest
        env:
        - name: PYTHONPATH
          value: /app
        - name: RLHF_MODE
          value: production
        - name: PRIVACY_MODE
          valueFrom:
            configMapKeyRef:
              name: rlhf-config
              key: privacy_mode
        - name: COMPLIANCE_FRAMEWORK
          valueFrom:
            configMapKeyRef:
              name: rlhf-config
              key: compliance_framework
        - name: STORAGE_BACKEND
          valueFrom:
            configMapKeyRef:
              name: rlhf-config
              key: storage_backend
        - name: POSTGRES_HOST
          value: postgres-service
        - name: REDIS_HOST
          value: redis-service
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: terragon-secrets
              key: postgres-password
        ports:
        - containerPort: 8080
          name: api-port
        - containerPort: 8090
          name: health-port
        resources:
          limits:
            cpu: "4"
            memory: 8Gi
          requests:
            cpu: "2"
            memory: 4Gi
        readinessProbe:
          httpGet:
            path: /health
            port: 8090
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8090
          initialDelaySeconds: 60
          periodSeconds: 20
        volumeMounts:
        - name: rlhf-data
          mountPath: /app/data
        - name: rlhf-logs
          mountPath: /app/logs
      volumes:
      - name: rlhf-data
        persistentVolumeClaim:
          claimName: rlhf-data-pvc
      - name: rlhf-logs
        persistentVolumeClaim:
          claimName: rlhf-logs-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: rlhf-audit-service
  namespace: terragon-production
  labels:
    app: rlhf-audit-service
spec:
  selector:
    app: rlhf-audit-service
  ports:
  - name: api
    port: 8080
    targetPort: 8080
  - name: health
    port: 8090
    targetPort: 8090
  type: LoadBalancer

---

# Quantum Task Planner Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quantum-planner-service
  namespace: terragon-production
  labels:
    app: quantum-planner-service
    tier: application
spec:
  replicas: 3
  selector:
    matchLabels:
      app: quantum-planner-service
  template:
    metadata:
      labels:
        app: quantum-planner-service
        tier: application
    spec:
      containers:
      - name: quantum-planner
        image: terragon/quantum-task-planner:latest
        env:
        - name: PYTHONPATH
          value: /app
        - name: QUANTUM_MODE
          value: production
        - name: PERFORMANCE_OPTIMIZATION
          valueFrom:
            configMapKeyRef:
              name: quantum-config
              key: performance_optimization
        - name: COHERENCE_PRESERVATION
          valueFrom:
            configMapKeyRef:
              name: quantum-config
              key: coherence_preservation
        - name: ENTANGLEMENT_ENABLED
          valueFrom:
            configMapKeyRef:
              name: quantum-config
              key: entanglement_enabled
        - name: POSTGRES_HOST
          value: postgres-service
        - name: REDIS_HOST
          value: redis-service
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: terragon-secrets
              key: postgres-password
        ports:
        - containerPort: 8081
          name: api-port
        - containerPort: 8091
          name: health-port
        resources:
          limits:
            cpu: "6"
            memory: 12Gi
          requests:
            cpu: "3"
            memory: 6Gi
        readinessProbe:
          httpGet:
            path: /health
            port: 8091
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8091
          initialDelaySeconds: 60
          periodSeconds: 20
        volumeMounts:
        - name: quantum-data
          mountPath: /app/data
        - name: quantum-logs
          mountPath: /app/logs
      volumes:
      - name: quantum-data
        persistentVolumeClaim:
          claimName: quantum-data-pvc
      - name: quantum-logs
        persistentVolumeClaim:
          claimName: quantum-logs-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: quantum-planner-service
  namespace: terragon-production
  labels:
    app: quantum-planner-service
spec:
  selector:
    app: quantum-planner-service
  ports:
  - name: api
    port: 8081
    targetPort: 8081
  - name: health
    port: 8091
    targetPort: 8091
  type: LoadBalancer

---

# Horizontal Pod Autoscaler for RLHF
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rlhf-audit-hpa
  namespace: terragon-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rlhf-audit-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---

# Horizontal Pod Autoscaler for Quantum
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: quantum-planner-hpa
  namespace: terragon-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: quantum-planner-service
  minReplicas: 3
  maxReplicas: 12
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85

---

# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: terragon-production
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: ssd-provisioner

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: terragon-production
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: ssd-provisioner

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rlhf-data-pvc
  namespace: terragon-production
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 500Gi
  storageClassName: nfs-provisioner

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rlhf-logs-pvc
  namespace: terragon-production
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: nfs-provisioner

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: quantum-data-pvc
  namespace: terragon-production
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 200Gi
  storageClassName: nfs-provisioner

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: quantum-logs-pvc
  namespace: terragon-production
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: nfs-provisioner

---

# Network Policies for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: terragon-network-policy
  namespace: terragon-production
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: terragon-production
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
    - protocol: TCP
      port: 8090
    - protocol: TCP
      port: 8091
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 80    # HTTP
    - protocol: TCP
      port: 443   # HTTPS
    - protocol: TCP
      port: 53    # DNS
    - protocol: UDP
      port: 53    # DNS

---

# RBAC Configuration
apiVersion: v1
kind: ServiceAccount
metadata:
  name: terragon-service-account
  namespace: terragon-production

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: terragon-role
  namespace: terragon-production
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: terragon-rolebinding
  namespace: terragon-production
subjects:
- kind: ServiceAccount
  name: terragon-service-account
  namespace: terragon-production
roleRef:
  kind: Role
  name: terragon-role
  apiGroup: rbac.authorization.k8s.io

---

# Ingress Configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: terragon-ingress
  namespace: terragon-production
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.terragon.ai
    - quantum.terragon.ai
    secretName: terragon-tls
  rules:
  - host: api.terragon.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: rlhf-audit-service
            port:
              number: 8080
  - host: quantum.terragon.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: quantum-planner-service
            port:
              number: 8081